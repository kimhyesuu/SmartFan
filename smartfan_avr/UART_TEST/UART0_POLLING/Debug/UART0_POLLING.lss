
UART0_POLLING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba8  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000992  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000476  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c6  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018c  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 38       	cpi	r26, 0x8C	; 140
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	46 d0       	rcall	.+140    	; 0x140 <main>
  b4:	77 c0       	rjmp	.+238    	; 0x1a4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <UART0_string_receive_transmit_test>:
	UART0_string_receive_transmit_test();
	// UART0_transmit_receive_test();  // byte단위 rx-->tx loopback test 
	// UART0_printf_test();   // uart0로 printf 시험 확인
}
void UART0_string_receive_transmit_test()
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	c4 56       	subi	r28, 0x64	; 100
  c2:	d1 09       	sbc	r29, r1
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
	char data;    // UART RX register로 부터 읽어온 1byte를 저장할 변수 
	char buffer[100];   // UART 부터 읽어온 data를 \r 이나 \n을 만날때 까지 저장할 공간 
	int i=0;   // buffer 의 index 변수 
	int end_message=0;   // \r이나 \n을 만났다는 인디케이터 flag변수 
	                     // \r이나 \n을 만나면 1로 set된다. 
	DDRA = 0xFF;  
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	UART0_init();   //1 UART0 초기화
  d2:	37 d0       	rcall	.+110    	; 0x142 <UART0_init>
	UART0_printf_string("UART0 RX<->TX string test\r\n");  // 2,
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	49 d0       	rcall	.+146    	; 0x16c <UART0_printf_string>
	while (1)
	{
		data = UART0_receive();  // 3. UART0로 부터 1byte읽어서 data라는 변수에 저장
		if (data == '\r')   // string의 끝이면 
		{
			buffer[i] = '\0';   // 종료 문자를 NULL
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	5c 01       	movw	r10, r24
  e0:	c8 2e       	mov	r12, r24
  e2:	db 2c       	mov	r13, r11
  e4:	fe 01       	movw	r30, r28
  e6:	31 96       	adiw	r30, 0x01	; 1
  e8:	7f 01       	movw	r14, r30
	UART0_string_receive_transmit_test();
	// UART0_transmit_receive_test();  // byte단위 rx-->tx loopback test 
	// UART0_printf_test();   // uart0로 printf 시험 확인
}
void UART0_string_receive_transmit_test()
{
  ea:	00 e0       	ldi	r16, 0x00	; 0
	DDRA = 0xFF;  
	UART0_init();   //1 UART0 초기화
	UART0_printf_string("UART0 RX<->TX string test\r\n");  // 2,
	while (1)
	{
		data = UART0_receive();  // 3. UART0로 부터 1byte읽어서 data라는 변수에 저장
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	3a d0       	rcall	.+116    	; 0x164 <UART0_receive>
		if (data == '\r')   // string의 끝이면 
  f0:	8d 30       	cpi	r24, 0x0D	; 13
  f2:	71 f4       	brne	.+28     	; 0x110 <UART0_string_receive_transmit_test+0x58>
		{
			buffer[i] = '\0';   // 종료 문자를 NULL
  f4:	f5 01       	movw	r30, r10
  f6:	e0 0f       	add	r30, r16
  f8:	f1 1f       	adc	r31, r17
  fa:	10 82       	st	Z, r1
		{
			buffer[i++] = data;   // UART로 부터 읽어온 byte를 string buffer에 save한다. 
		}
		if (end_message == YES)   // 완전한 message가 buffer에 들어 있다면 
		{
			if (strncmp(buffer,"led0on",sizeof("led0on")) == 0)
  fc:	47 e0       	ldi	r20, 0x07	; 7
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	6c e1       	ldi	r22, 0x1C	; 28
 102:	71 e0       	ldi	r23, 0x01	; 1
 104:	8c 2d       	mov	r24, r12
 106:	9d 2d       	mov	r25, r13
 108:	3f d0       	rcall	.+126    	; 0x188 <strncmp>
 10a:	89 2b       	or	r24, r25
 10c:	59 f4       	brne	.+22     	; 0x124 <UART0_string_receive_transmit_test+0x6c>
 10e:	06 c0       	rjmp	.+12     	; 0x11c <UART0_string_receive_transmit_test+0x64>
			buffer[i] = '\0';   // 종료 문자를 NULL
			end_message = YES;  // end message를 나타내는 flag를 set한다. 
		}
		else
		{
			buffer[i++] = data;   // UART로 부터 읽어온 byte를 string buffer에 save한다. 
 110:	0f 5f       	subi	r16, 0xFF	; 255
 112:	1f 4f       	sbci	r17, 0xFF	; 255
 114:	f7 01       	movw	r30, r14
 116:	81 93       	st	Z+, r24
 118:	7f 01       	movw	r14, r30
		}
		if (end_message == YES)   // 완전한 message가 buffer에 들어 있다면 
		{
			if (strncmp(buffer,"led0on",sizeof("led0on")) == 0)
			{
				PORTA |= 0b00000001;   // 0번 LED를 on
 11a:	e9 cf       	rjmp	.-46     	; 0xee <UART0_string_receive_transmit_test+0x36>
				UART0_printf_string("led0on changed.... \r\n");				
 11c:	d8 9a       	sbi	0x1b, 0	; 27
 11e:	83 e2       	ldi	r24, 0x23	; 35
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	24 d0       	rcall	.+72     	; 0x16c <UART0_printf_string>
			}
			if (strncmp(buffer,"led0off",sizeof("led0off")) == 0)
 124:	48 e0       	ldi	r20, 0x08	; 8
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	69 e3       	ldi	r22, 0x39	; 57
 12a:	71 e0       	ldi	r23, 0x01	; 1
 12c:	8c 2d       	mov	r24, r12
 12e:	9d 2d       	mov	r25, r13
 130:	2b d0       	rcall	.+86     	; 0x188 <strncmp>
 132:	89 2b       	or	r24, r25
			{
				PORTA &= 0b11111110;   // 0번 LED를 off
 134:	b9 f6       	brne	.-82     	; 0xe4 <UART0_string_receive_transmit_test+0x2c>
				UART0_printf_string("led0off changed....\r\n");					
 136:	d8 98       	cbi	0x1b, 0	; 27
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	17 d0       	rcall	.+46     	; 0x16c <UART0_printf_string>
 13e:	d2 cf       	rjmp	.-92     	; 0xe4 <UART0_string_receive_transmit_test+0x2c>

00000140 <main>:
void UART0_string_receive_transmit_test();

int main(void)
{
    /* Replace with your application code */
	UART0_string_receive_transmit_test();
 140:	bb df       	rcall	.-138    	; 0xb8 <UART0_string_receive_transmit_test>

00000142 <UART0_init>:
 */ 
#include <avr/io.h>

void UART0_init(void)
{
	UBRR0H = 0x00;
 142:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600 bps로 설정 
 146:	8f ec       	ldi	r24, 0xCF	; 207
 148:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1 << U2X0);   // 2배속 통신	
 14a:	59 9a       	sbi	0x0b, 1	; 11
	UCSR0C |= 0x06;  // Async(비동기). Data길이 8bits. Non Parity(패리티비트 사용 안함). stop 1 bit
 14c:	e5 e9       	ldi	r30, 0x95	; 149
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	86 60       	ori	r24, 0x06	; 6
 154:	80 83       	st	Z, r24
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0));   // 송.수신 가능 하고록 설정을 하는것이다. 
 156:	88 e1       	ldi	r24, 0x18	; 24
 158:	8a b9       	out	0x0a, r24	; 10
 15a:	08 95       	ret

0000015c <UART0_transmit>:
/*
*  UART0로 1 byte를 보내는 함수 이다. 
*/  
void UART0_transmit(char data)
{
	while ( !(UCSR0A & (1 << UDRE0)) )
 15c:	5d 9b       	sbis	0x0b, 5	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <UART0_transmit>
		;
	UDR0 = data;	
 160:	8c b9       	out	0x0c, r24	; 12
 162:	08 95       	ret

00000164 <UART0_receive>:
/*
*  UART0로부터 1 byte를 읽어오는 함수 이다.
*/
unsigned char UART0_receive(void)
{
	while ( !(UCSR0A & (1 << RXC0)) )
 164:	5f 9b       	sbis	0x0b, 7	; 11
 166:	fe cf       	rjmp	.-4      	; 0x164 <UART0_receive>
		;
	return UDR0;		
 168:	8c b1       	in	r24, 0x0c	; 12
}
 16a:	08 95       	ret

0000016c <UART0_printf_string>:
/*
*  UART0로 string을 출력 하는 함수
*/
void UART0_printf_string(char *str)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
	for (int i=0; str[i] != '\0'; i++)
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <UART0_printf_string+0x16>
 178:	21 96       	adiw	r28, 0x01	; 1
		UART0_transmit(str[i]);	
 17a:	f0 df       	rcall	.-32     	; 0x15c <UART0_transmit>
/*
*  UART0로 string을 출력 하는 함수
*/
void UART0_printf_string(char *str)
{
	for (int i=0; str[i] != '\0'; i++)
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fc cf       	rjmp	.-8      	; 0x17a <UART0_printf_string+0xe>
		UART0_transmit(str[i]);	
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <strncmp>:
 188:	fb 01       	movw	r30, r22
 18a:	dc 01       	movw	r26, r24
 18c:	41 50       	subi	r20, 0x01	; 1
 18e:	50 40       	sbci	r21, 0x00	; 0
 190:	30 f0       	brcs	.+12     	; 0x19e <strncmp+0x16>
 192:	8d 91       	ld	r24, X+
 194:	01 90       	ld	r0, Z+
 196:	80 19       	sub	r24, r0
 198:	19 f4       	brne	.+6      	; 0x1a0 <strncmp+0x18>
 19a:	00 20       	and	r0, r0
 19c:	b9 f7       	brne	.-18     	; 0x18c <strncmp+0x4>
 19e:	88 1b       	sub	r24, r24
 1a0:	99 0b       	sbc	r25, r25
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
